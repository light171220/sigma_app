import { AppTemplate, Screen, DatabaseTable, Workflow } from '@/types'

export const createInventoryManagementTemplate = (): AppTemplate => {
  const screens: Screen[] = [
    {
      id: 'home-screen',
      name: 'Home',
      title: 'Inventory Dashboard',
      isHome: true,
      components: [],
      navigation: {
        type: 'stack',
        showHeader: true,
        headerTitle: 'Inventory',
        headerBackTitle: 'Back',
        headerTransparent: false,
      },
      settings: {
        backgroundColor: { r: 248, g: 250, b: 252, a: 1 },
        safeAreaInsets: true,
        statusBarStyle: 'dark',
        orientation: 'portrait',
        scrollable: true,
        refreshable: true,
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    {
      id: 'products-screen',
      name: 'Products',
      title: 'Products',
      isHome: false,
      components: [],
      navigation: {
        type: 'stack',
        showHeader: true,
        headerTitle: 'Products',
        headerBackTitle: 'Back',
        headerTransparent: false,
      },
      settings: {
        backgroundColor: { r: 255, g: 255, b: 255, a: 1 },
        safeAreaInsets: true,
        statusBarStyle: 'dark',
        orientation: 'portrait',
        scrollable: true,
        refreshable: true,
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
  ]

  const tables: DatabaseTable[] = [
    {
      id: 'products-table',
      name: 'products',
      displayName: 'Products',
      description: 'Product catalog and inventory',
      fields: [
        {
          id: 'product-id',
          name: 'id',
          displayName: 'Product ID',
          type: 'uuid',
          required: true,
          unique: true,
          indexed: true,
          validation: {},
          order: 1,
        },
        {
          id: 'product-name',
          name: 'name',
          displayName: 'Product Name',
          type: 'string',
          required: true,
          unique: false,
          indexed: true,
          validation: { maxLength: 100 },
          order: 2,
        },
        {
          id: 'product-sku',
          name: 'sku',
          displayName: 'SKU',
          type: 'string',
          required: true,
          unique: true,
          indexed: true,
          validation: { maxLength: 50 },
          order: 3,
        },
        {
          id: 'product-price',
          name: 'price',
          displayName: 'Price',
          type: 'decimal',
          required: true,
          unique: false,
          indexed: false,
          validation: { min: 0 },
          options: { precision: 10, scale: 2 },
          order: 4,
        },
        {
          id: 'product-quantity',
          name: 'quantity',
          displayName: 'Stock Quantity',
          type: 'integer',
          required: true,
          unique: false,
          indexed: false,
          validation: { min: 0 },
          order: 5,
        },
      ],
      position: { x: 100, y: 100 },
      color: '#3B82F6',
      timestamps: true,
      softDelete: false,
      audit: true,
      permissions: {
        create: ['authenticated'],
        read: ['authenticated'],
        update: ['authenticated'],
        delete: ['admin'],
      },
      indexes: [],
      constraints: [],
    },
    {
      id: 'suppliers-table',
      name: 'suppliers',
      displayName: 'Suppliers',
      description: 'Supplier information',
      fields: [
        {
          id: 'supplier-id',
          name: 'id',
          displayName: 'Supplier ID',
          type: 'uuid',
          required: true,
          unique: true,
          indexed: true,
          validation: {},
          order: 1,
        },
        {
          id: 'supplier-name',
          name: 'name',
          displayName: 'Supplier Name',
          type: 'string',
          required: true,
          unique: false,
          indexed: true,
          validation: { maxLength: 100 },
          order: 2,
        },
        {
          id: 'supplier-email',
          name: 'email',
          displayName: 'Email',
          type: 'email',
          required: false,
          unique: false,
          indexed: false,
          validation: {},
          order: 3,
        },
        {
          id: 'supplier-phone',
          name: 'phone',
          displayName: 'Phone',
          type: 'phone',
          required: false,
          unique: false,
          indexed: false,
          validation: {},
          order: 4,
        },
      ],
      position: { x: 400, y: 100 },
      color: '#10B981',
      timestamps: true,
      softDelete: false,
      audit: false,
      permissions: {
        create: ['admin'],
        read: ['authenticated'],
        update: ['admin'],
        delete: ['admin'],
      },
      indexes: [],
      constraints: [],
    },
  ]

  const workflows: Workflow[] = [
    {
      id: 'low-stock-alert',
      name: 'Low Stock Alert',
      description: 'Send notification when product stock is low',
      trigger: {
        id: 'stock-trigger',
        type: 'data_change',
        name: 'Stock Change Trigger',
        config: {
          table: 'products',
          field: 'quantity',
          condition: 'quantity < 10',
        },
        enabled: true,
      },
      nodes: [],
      connections: [],
      variables: [],
      status: 'active',
      version: 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      runCount: 0,
      errorCount: 0,
    },
  ]

  return {
    id: 'inventory-management',
    name: 'Inventory Management',
    description: 'Complete inventory management system with products, suppliers, and stock tracking',
    category: 'business',
    preview: [
      '/templates/inventory-1.png',
      '/templates/inventory-2.png',
      '/templates/inventory-3.png',
    ],
    thumbnail: '/templates/inventory-thumb.png',
    screens,
    database: {
      id: 'inventory-db',
      name: 'Inventory Database',
      tables,
      relationships: [],
      version: 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    workflows,
    settings: {
      general: {
        bundleId: 'com.sigma.inventory',
        version: '1.0.0',
        buildNumber: 1,
        supportEmail: 'support@sigma.app',
        minimumOSVersion: '14.0',
      },
      appearance: {
        theme: 'light',
        primaryColor: { r: 59, g: 130, b: 246, a: 1 },
        accentColor: { r: 16, g: 185, b: 129, a: 1 },
        fontFamily: 'Inter',
        splashScreen: {
          backgroundColor: { r: 59, g: 130, b: 246, a: 1 },
          showLoadingIndicator: true,
          duration: 2000,
        },
        appIcon: {
          backgroundColor: { r: 59, g: 130, b: 246, a: 1 },
          cornerRadius: 16,
        },
      },
      permissions: {
        camera: true,
        microphone: false,
        location: false,
        contacts: false,
        calendar: false,
        photos: true,
        notifications: true,
        fileSystem: true,
      },
      integrations: {
        analytics: true,
        crashReporting: true,
        pushNotifications: true,
        socialLogin: {
          google: false,
          facebook: false,
          twitter: false,
          github: false,
        },
        apis: [],
      },
      build: {
        platforms: ['both'],
        environment: 'development',
        minifyCode: true,
        optimizeImages: true,
        generateSourceMaps: false,
        enableDebugMode: false,
      },
    },
    tags: ['business', 'inventory', 'products', 'stock', 'suppliers'],
    difficulty: 'intermediate',
    estimatedTime: 120,
  }
}

export const createTaskManagementTemplate = (): AppTemplate => {
  const screens: Screen[] = [
    {
      id: 'dashboard-screen',
      name: 'Dashboard',
      title: 'Task Dashboard',
      isHome: true,
      components: [],
      navigation: {
        type: 'tab',
        showHeader: true,
        headerTitle: 'Tasks',
        headerTransparent: false,
        tabBarIcon: 'Home',
        tabBarLabel: 'Dashboard',
      },
      settings: {
        backgroundColor: { r: 248, g: 250, b: 252, a: 1 },
        safeAreaInsets: true,
        statusBarStyle: 'dark',
        orientation: 'portrait',
        scrollable: true,
        refreshable: true,
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    {
      id: 'tasks-screen',
      name: 'Tasks',
      title: 'My Tasks',
      isHome: false,
      components: [],
      navigation: {
        type: 'tab',
        showHeader: true,
        headerTitle: 'Tasks',
        headerTransparent: false,
        tabBarIcon: 'CheckSquare',
        tabBarLabel: 'Tasks',
      },
      settings: {
        backgroundColor: { r: 255, g: 255, b: 255, a: 1 },
        safeAreaInsets: true,
        statusBarStyle: 'dark',
        orientation: 'portrait',
        scrollable: true,
        refreshable: true,
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    {
      id: 'projects-screen',
      name: 'Projects',
      title: 'Projects',
      isHome: false,
      components: [],
      navigation: {
        type: 'tab',
        showHeader: true,
        headerTitle: 'Projects',
        headerTransparent: false,
        tabBarIcon: 'Folder',
        tabBarLabel: 'Projects',
      },
      settings: {
        backgroundColor: { r: 255, g: 255, b: 255, a: 1 },
        safeAreaInsets: true,
        statusBarStyle: 'dark',
        orientation: 'portrait',
        scrollable: true,
        refreshable: true,
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
  ]

  const tables: DatabaseTable[] = [
    {
      id: 'projects-table',
      name: 'projects',
      displayName: 'Projects',
      description: 'Project management',
      fields: [
        {
          id: 'project-id',
          name: 'id',
          displayName: 'Project ID',
          type: 'uuid',
          required: true,
          unique: true,
          indexed: true,
          validation: {},
          order: 1,
        },
        {
          id: 'project-name',
          name: 'name',
          displayName: 'Project Name',
          type: 'string',
          required: true,
          unique: false,
          indexed: true,
          validation: { maxLength: 100 },
          order: 2,
        },
        {
          id: 'project-description',
          name: 'description',
          displayName: 'Description',
          type: 'text',
          required: false,
          unique: false,
          indexed: false,
          validation: {},
          order: 3,
        },
        {
          id: 'project-status',
          name: 'status',
          displayName: 'Status',
          type: 'enum',
          required: true,
          unique: false,
          indexed: true,
          validation: {},
          options: { enumValues: ['active', 'completed', 'archived', 'on_hold'] },
          order: 4,
        },
        {
          id: 'project-due-date',
          name: 'due_date',
          displayName: 'Due Date',
          type: 'date',
          required: false,
          unique: false,
          indexed: false,
          validation: {},
          order: 5,
        },
      ],
      position: { x: 100, y: 100 },
      color: '#8B5CF6',
      timestamps: true,
      softDelete: false,
      audit: true,
      permissions: {
        create: ['authenticated'],
        read: ['authenticated'],
        update: ['authenticated'],
        delete: ['owner', 'admin'],
      },
      indexes: [],
      constraints: [],
    },
    {
      id: 'tasks-table',
      name: 'tasks',
      displayName: 'Tasks',
      description: 'Task management',
      fields: [
        {
          id: 'task-id',
          name: 'id',
          displayName: 'Task ID',
          type: 'uuid',
          required: true,
          unique: true,
          indexed: true,
          validation: {},
          order: 1,
        },
        {
          id: 'task-title',
          name: 'title',
          displayName: 'Task Title',
          type: 'string',
          required: true,
          unique: false,
          indexed: true,
          validation: { maxLength: 200 },
          order: 2,
        },
        {
          id: 'task-description',
          name: 'description',
          displayName: 'Description',
          type: 'text',
          required: false,
          unique: false,
          indexed: false,
          validation: {},
          order: 3,
        },
        {
          id: 'task-status',
          name: 'status',
          displayName: 'Status',
          type: 'enum',
          required: true,
          unique: false,
          indexed: true,
          validation: {},
          options: { enumValues: ['todo', 'in_progress', 'review', 'completed'] },
          order: 4,
        },
        {
          id: 'task-priority',
          name: 'priority',
          displayName: 'Priority',
          type: 'enum',
          required: true,
          unique: false,
          indexed: true,
          validation: {},
          options: { enumValues: ['low', 'medium', 'high', 'urgent'] },
          order: 5,
        },
        {
          id: 'task-due-date',
          name: 'due_date',
          displayName: 'Due Date',
          type: 'datetime',
          required: false,
          unique: false,
          indexed: true,
          validation: {},
          order: 6,
        },
        {
          id: 'task-project-id',
          name: 'project_id',
          displayName: 'Project',
          type: 'uuid',
          required: false,
          unique: false,
          indexed: true,
          validation: {},
          order: 7,
        },
      ],
      position: { x: 400, y: 100 },
      color: '#F59E0B',
      timestamps: true,
      softDelete: false,
      audit: true,
      permissions: {
        create: ['authenticated'],
        read: ['authenticated'],
        update: ['authenticated'],
        delete: ['owner', 'admin'],
      },
      indexes: [],
      constraints: [],
    },
  ]

  return {
    id: 'task-management',
    name: 'Task Management',
    description: 'Complete task and project management system with deadlines and priorities',
    category: 'productivity',
    preview: [
      '/templates/tasks-1.png',
      '/templates/tasks-2.png',
      '/templates/tasks-3.png',
    ],
    thumbnail: '/templates/tasks-thumb.png',
    screens,
    database: {
      id: 'tasks-db',
      name: 'Tasks Database',
      tables,
      relationships: [
        {
          id: 'project-tasks-rel',
          name: 'project_tasks',
          type: 'one-to-many',
          fromTable: 'projects',
          toTable: 'tasks',
          fromField: 'id',
          toField: 'project_id',
          onDelete: 'SET_NULL',
          onUpdate: 'CASCADE',
          required: false,
          description: 'Projects can have multiple tasks',
        },
      ],
      version: 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    workflows: [
      {
        id: 'task-reminder',
        name: 'Task Due Reminder',
        description: 'Send reminder notifications for due tasks',
        trigger: {
          id: 'due-date-trigger',
          type: 'timer',
          name: 'Daily Check',
          config: {
            cron: '0 9 * * *',
            condition: 'due_date <= NOW() + INTERVAL 1 DAY',
          },
          enabled: true,
        },
        nodes: [],
        connections: [],
        variables: [],
        status: 'active',
        version: 1,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        runCount: 0,
        errorCount: 0,
      },
    ],
    settings: {
      general: {
        bundleId: 'com.sigma.tasks',
        version: '1.0.0',
        buildNumber: 1,
        supportEmail: 'support@sigma.app',
        minimumOSVersion: '14.0',
      },
      appearance: {
        theme: 'light',
        primaryColor: { r: 139, g: 92, b: 246, a: 1 },
        accentColor: { r: 245, g: 158, b: 11, a: 1 },
        fontFamily: 'Inter',
        splashScreen: {
          backgroundColor: { r: 139, g: 92, b: 246, a: 1 },
          showLoadingIndicator: true,
          duration: 2000,
        },
        appIcon: {
          backgroundColor: { r: 139, g: 92, b: 246, a: 1 },
          cornerRadius: 16,
        },
      },
      permissions: {
        camera: false,
        microphone: false,
        location: false,
        contacts: false,
        calendar: true,
        photos: false,
        notifications: true,
        fileSystem: false,
      },
      integrations: {
        analytics: true,
        crashReporting: true,
        pushNotifications: true,
        socialLogin: {
          google: true,
          facebook: false,
          twitter: false,
          github: false,
        },
        apis: [],
      },
      build: {
        platforms: ['both'],
        environment: 'development',
        minifyCode: true,
        optimizeImages: true,
        generateSourceMaps: false,
        enableDebugMode: false,
      },
    },
    tags: ['productivity', 'tasks', 'projects', 'deadlines', 'organization'],
    difficulty: 'beginner',
    estimatedTime: 90,
  }
}

export const createCRMTemplate = (): AppTemplate => {
  return {
    id: 'crm-system',
    name: 'CRM System',
    description: 'Customer relationship management with contacts, deals, and sales tracking',
    category: 'business',
    preview: ['/templates/crm-1.png', '/templates/crm-2.png'],
    thumbnail: '/templates/crm-thumb.png',
    screens: [],
    database: {
      id: 'crm-db',
      name: 'CRM Database',
      tables: [],
      relationships: [],
      version: 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    workflows: [],
    settings: {
      general: {
        bundleId: 'com.sigma.crm',
        version: '1.0.0',
        buildNumber: 1,
        supportEmail: 'support@sigma.app',
        minimumOSVersion: '14.0',
      },
      appearance: {
        theme: 'light',
        primaryColor: { r: 16, g: 185, b: 129, a: 1 },
        accentColor: { r: 59, g: 130, b: 246, a: 1 },
        fontFamily: 'Inter',
        splashScreen: {
          backgroundColor: { r: 16, g: 185, b: 129, a: 1 },
          showLoadingIndicator: true,
          duration: 2000,
        },
        appIcon: {
          backgroundColor: { r: 16, g: 185, b: 129, a: 1 },
          cornerRadius: 16,
        },
      },
      permissions: {
        camera: false,
        microphone: false,
        location: false,
        contacts: true,
        calendar: true,
        photos: false,
        notifications: true,
        fileSystem: false,
      },
      integrations: {
        analytics: true,
        crashReporting: true,
        pushNotifications: true,
        socialLogin: {
          google: true,
          facebook: false,
          twitter: false,
          github: false,
        },
        apis: [],
      },
      build: {
        platforms: ['both'],
        environment: 'development',
        minifyCode: true,
        optimizeImages: true,
        generateSourceMaps: false,
        enableDebugMode: false,
      },
    },
    tags: ['business', 'crm', 'customers', 'sales', 'contacts'],
    difficulty: 'advanced',
    estimatedTime: 180,
  }
}

export const getAllBusinessTemplates = (): AppTemplate[] => [
  createInventoryManagementTemplate(),
  createTaskManagementTemplate(),
  createCRMTemplate(),
]

export const getTemplateById = (id: string): AppTemplate | undefined => {
  const templates = getAllBusinessTemplates()
  return templates.find(template => template.id === id)
}

export const getTemplatesByCategory = (category: string): AppTemplate[] => {
  const templates = getAllBusinessTemplates()
  return templates.filter(template => template.category === category)
}

export const getFeaturedTemplates = (): AppTemplate[] => {
  return [
    createInventoryManagementTemplate(),
    createTaskManagementTemplate(),
  ]
}

export const getPopularTemplates = (): AppTemplate[] => {
  return [
    createTaskManagementTemplate(),
    createInventoryManagementTemplate(),
    createCRMTemplate(),
  ]
}